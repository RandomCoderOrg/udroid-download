name: Build and Release (Anchor)
on:
  schedule: [{cron: "1 1 1 * *"}]
  workflow_dispatch: { }
  push:
    paths-ignore:
      - '**.md'
      - '**.json'
      - '.gitignore'
      - '.vscode/**'
    branches:
      - anchor


jobs:
  suite-build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        suite: [ jammy ]
        variant: [ gnome ]
        architecture: [ amd64 ] # only amd64 for fast builds
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: docker/setup-qemu-action@v2

      - name: ‚§µÔ∏è Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install git build-essential binfmt-support qemu-user-static debootstrap -y

      - name: üõ†Ô∏è Build ${{ matrix.suite }}-${{ matrix.variant }}-${{ matrix.architecture }}
        run: sudo bash build.sh -s ${{ matrix.suite }} -v ${{ matrix.variant }} -a ${{ matrix.architecture }}

      - name: ‚¨ÜÔ∏è Upload Tarballs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.suite }}-${{ matrix.variant }}-${{ matrix.architecture }}-tarballs
          path: fs-cook/out/${{ matrix.suite }}-${{ matrix.variant }}-${{ matrix.architecture }}.tar.gz

  create-release:
    runs-on: ubuntu-latest

    if: ${{ always() }}
    needs: suite-build

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì• Download All Tarballs
        uses: actions/download-artifact@v4.1.7

      - name: üè∑ Generate Release Tag
        run: |
          udroid_version=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' \
              https://github.com/RandomCoderOrg/ubuntu-on-android \
              | tail -n1 | cut -d / -f 3 | cut -d v -f 2- )
      
          latest_tag=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' \
            https://github.com/RandomCoderOrg/udroid-download \
            | tail -n1 | cut -d / -f 3)
          
          if [[ $latest_tag =~ R([0-9]+)$ ]]; then
            current_release=${BASH_REMATCH[1]}
          else
            current_release=0
          fi
          
          next_release=$((current_release + 1))
          
          echo "VERSIONTAG=V${udroid_version}ABR${next_release}" >> $GITHUB_ENV

      - name: üìù Generate Release Notes
        run: sudo bash /home/runner/work/udroid-download/udroid-download/.github/scripts/generate-release-notes.sh

      - name: ‚¨ÜÔ∏è Upload Suite Tarballs
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN  }}
          tag: ${{ env.VERSIONTAG }}
          name: ${{ env.VERSIONTAG }}
          bodyFile: release.md
          draft: false
          prerelease: true
          artifacts: '*-*-tarballs/*.tar.gz'
          makeLatest: true

      - name: ‚öôÔ∏è Generate New distro-data.json
        run: sudo python3 gen_data/gen-update-json.py --release-tag ${{ env.VERSIONTAG }}

      - name: ‚öôÔ∏è Update distro-data.json
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          skip_fetch: false
          skip_checkout: false
          commit_message: 'AUTO JOB: (ANCHOR) update distro-data.json for ${{ env.VERSIONTAG }}'
          file_pattern: distro-data.json
